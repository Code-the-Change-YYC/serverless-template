# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: serverless-template
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs10.x

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:Scan*
      Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:provider.environment.DYNAMODB_TABLE}

# you can define service wide environment variables here
  environment:
    DYNAMODB_TABLE: ${self:service}-project-${self:provider.stage}

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**
plugins:
  - serverless-pseudo-parameters
  - serverless-finch

custom:
  client:
    bucketName: ${self:service}-project-${self:provider.stage}-website

functions:
  list:
    handler: functions/list.handler
    events:
      - http:
          path: /v1/example
          method: get
  create:
    handler: functions/create.handler
    events:
      - http:
          path: /v1/example
          method: post
  retrieve:
    handler: functions/retrieve.handler
    events:
      - http:
          path: /v1/example/{code}
          method: get
  update:
    handler: functions/update.handler
    events:
      - http:
          path: /v1/example/{code}
          method: put
  delete:
    handler: functions/delete.handler
    events:
      - http:
          path: /v1/example/{code}
          method: delete

# you can add CloudFormation resource templates here
resources:
  Resources:
    ProjectTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        AttributeDefinitions:
          - AttributeName: code
            AttributeType: S
        KeySchema:
          - AttributeName: code
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        Tags:
          - Key: "Project"
            Value: ${self:service}

#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
